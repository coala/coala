import os
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄=len
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐬂=True
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ㅋ=False
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ=None
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥤭=OSError
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𩔦=list
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤅻=os.error
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘=os.path
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤌝=os.sep
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜飇=os.curdir
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𠯯=os.listdir
import platform
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐨗=platform.system
import re
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜钅=re.finditer
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻺ=re.escape
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤺜=re.compile
from coalib.misc.Decorators import yield_once
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䭂(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ,start_index):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ)
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍=start_index
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴 and ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍]=='!':
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍+=1
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴: 
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍+=1
 while ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴 and ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍]!=']':
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍+=1
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸎(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜惡):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜惡=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ[:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜惡])
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴=0,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ)
 while ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜惡:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕]
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕+=1
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=='[':
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䭂(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ۻ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕)
   if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴:
    if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕<=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜惡<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍:
     return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐬂
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍+1
   else:
    return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ㅋ
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ㅋ
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻧ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜钅('\\)',ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
  if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸎(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋.start()):
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋.start()
   break 
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜钅('\\(',ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁]):
  if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸎(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋.start()):
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋.end()
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁
@yield_once
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ꘜ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ=0
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﵜ=[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋.start()for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜钅('\\|',ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)]
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﵜ.append(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇))
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﵜ:
  if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸎(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁):
   yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁]
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁+1
@yield_once
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜හ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻧ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ in(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁):
  yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇
 else:
  for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜皴 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ꘜ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁]):
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﰶ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲘ-1]+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜皴+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐤁+1:]
   for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭞ in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜හ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﰶ):
    yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭞ
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐨝(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴=0,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞺄(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛=''
 while ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕]
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕+=1
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=='*':
   if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕<ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴 and ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕]=='*':
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='.*'
   elif ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐨗()=='Windows': 
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='[^/\\\\]*'
   else:
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='[^'+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻺ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤌝)+']*'
  elif ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=='?':
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='.'
  elif ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ=='[':
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䭂(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕)
   if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍>=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜갴:
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='\\['
   else:
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕:ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍].replace('\\','\\\\')
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧧕=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𢤍+1
    if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ[0]=='!':
     ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ='^'+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ[1:]
    elif ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ[0]=='^':
     ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ='\\'+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+='['+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜שּ+']'
  else:
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻺ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﴳ)
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜䙛+'\\Z(?ms)'
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥜚(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.normcase(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ)
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜හ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.expanduser(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.normcase(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤺜(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐨝(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)).match
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ)is not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ:
   return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐬂
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ㅋ
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𫄖(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.split(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑:
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.exists(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
   yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇
 else:
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.isdir(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ):
   yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇
 return
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦷛(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ):
 if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜飇
 try:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ꤝ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𠯯(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ)
 except ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤅻:
  return
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠗 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ꤝ:
  yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠗
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐦛=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.join(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠗)if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ else ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠗
  for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸷 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦷛(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐦛):
   yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.join(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠗,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𞸷)
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜嚲(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜飇
 try:
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜齨=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𠯯(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ)
 except ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥤭:
  return[]
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦔤=[]
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.normcase(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤺜(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𐨝(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)).match
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜齨:
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.normcase(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ)):
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦔤.append(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ)
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦔤
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ࢥ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑):
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.exists(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.join(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑)):
  return[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑]
 return[]
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜笋(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 assert ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇=='**'
 if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ:
  yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇[:0]
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𡋾 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦷛(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ):
  yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𡋾
ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜נּ=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𤺜('([*?[])')
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦛨(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜נּ.search(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇)
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𧶋 is not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﲜ
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜톼(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜හ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.expanduser(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.normcase(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)
  ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.split(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏)
  if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦛨(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏):
   for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𫄖(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏):
    yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖
   return
  if not ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ:
   if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑=='**':
    for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜笋(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑):
     yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖
   else:
    for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖 in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜嚲(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑):
     yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜멖
   return
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ!=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㐏 and ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦛨(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ):
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥫴=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜톼(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ)
  else:
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥫴=[ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ]
  if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦛨(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑):
   if ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑=='**':
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㗆=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜笋
   else:
    ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㗆=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜嚲
  else:
   ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㗆=ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ࢥ
  for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𥫴:
   for ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ in ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㗆(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜蠑):
    yield ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜㜘.join(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭼ,ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﻼ)
def ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜ﭺ(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇):
 return ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𩔦(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜톼(ﰼ𠍁メ𨛰䁲ﮑﻥ𐩵띜𦹇))
