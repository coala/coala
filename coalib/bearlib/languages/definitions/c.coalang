[DEFAULT]
comment_delimiter = //
multiline_comment_delimiters = /*: */
string_delimiters = ": "
indent_types = { : }

[C]
extensions = .c, .h
multiline_string_delimiters =
keywords = auto, break, case, char, const, continue, default, do, double,
else, enum, extern, float, for, goto, if, int, long, register, return, short,
signed, sizeof, static, struct, switch, typedef, union, unsigned, void,
volatile, while, \#include, \#define, \#undef, \#ifdef, \#ifndef,
\#if, \#endif, \#else, \#elif, \#line, \#pragma
special_chars = +-*\/.;\\,()[]{}\=<>|&^~?%!

[CPP]
extensions = .c, .cpp, .h, .hpp
multiline_string_delimiters = R(": )"
keywords = alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool,
break, case, catch, char, char16_t, char32_t, class, compl, concept,
const, constexpr, const_cast, continue, decltype, default, delete, do,
double, dynamic_cast, else, enum, explicit, export, extern, false, float,
for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept,
not, not_eq, nullptr, operator, or, or_eq, private, protected, public,
register, reinterpret_cast, requires, return, short, signed, sizeof,
static, static_assert, static_cast, struct, switch, template, this,
thread_local, throw, true, try, typedef, typeid, typename, union,
unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq,
\#include, \#define, \#undef, \#ifdef, \#ifndef, \#if, \#endif, \#else,
\#elif, \#line, \#pragma
special_chars = +-*\/.;\\,()[]{}\=<>|&^~?%!
