import inspect
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧌇=ImportError
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𥂢=issubclass
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧮫=True
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐰘=TypeError
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ=False
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𨽴=hasattr
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡴚=StopIteration
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ࠐ=isinstance
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𩿍=tuple
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆=None
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𣎣=list
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𑚪=inspect.getfile
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡈓=inspect.getmembers
import os
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﷅ=os.listdir
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ=os.path
import platform
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﶨ=platform.system
import sys
𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ٺ=sys.path
from coalib.misc.Decorators import arguments_to_lists,yield_once
from coalib.misc.ContextManagers import suppress_stdout
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ኤ(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊):
 if not 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ.exists(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊):
  raise 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧌇
 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭧ=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ.splitext(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ.basename(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊))[0]
 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﻓ=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ.dirname(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊)
 if 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﻓ not in 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ٺ:
  𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ٺ.insert(0,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﻓ)
 if 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﶨ()=='Windows': 
  for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ߖ in 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﷅ(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﻓ):
   𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡘮=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ڹ.splitext(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ߖ)[0]
   if 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡘮.lower()==𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭧ.lower():
    𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭧ=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡘮
    break
 return __import__(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭧ)
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ꁃ(test_class,superclasses):
 for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𪳬 in superclasses:
  try:
   if 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𥂢(test_class,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𪳬):
    return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧮫
  except 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐰘:
   pass
 return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𢣞(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,attribute_names):
 for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𥬹 in attribute_names:
  if not 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𨽴(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𥬹):
   return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ
 return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧮫
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇쾬(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊):
 try:
  𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭾ=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𑚪(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ)
  if(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﶨ()=='Windows' and 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭾ.lower()==𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊.lower()or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﭾ==𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊):
   return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧮫
 except 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐰘: 
  pass
 return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ
@arguments_to_lists
@yield_once
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𨫢(file_paths,names,types,supers,attributes,local):
 if file_paths==[]or (names==[]and types==[]and supers==[]and attributes==[]):
  raise 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡴚
 for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊 in file_paths:
  try:
   𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇車=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ኤ(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊)
   for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𪷟,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ in 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𡈓(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇車):
    if(names==[]or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𪷟 in names)and (types==[]or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ࠐ(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𩿍(types)))and (supers==[]or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ꁃ(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,supers))and (attributes==[]or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𢣞(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,attributes))and (local[0]is 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ or 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇쾬(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ,𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𐬊)):
     yield 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ
  except 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧌇:
   pass
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𣌨(file_paths,names=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,types=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,supers=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,attributes=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,local=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ,verbose=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ):
 if not verbose:
  with suppress_stdout():
   for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ in 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𨫢(file_paths,names,types,supers,attributes,local):
    yield 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ
 else:
  for 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ in 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𨫢(file_paths,names,types,supers,attributes,local):
   yield 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﳷ
def 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𧌍(file_paths,names=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,types=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,supers=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,attributes=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇讆,local=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ,verbose=𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇ﮎ):
 return 𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𣎣(𡂡𐦆𦾶뗏𐦀ᗒ𐩦ۅ𤓭ﳚ𞺦䫿ﶭﺜﭸ𨠡ⴉ𞸕ك쿻𩵳𥃓𐬜𡸱שּׁ꾝𐰆鋅𥿇𣌨(file_paths,names,types,supers,attributes,local,verbose))
# Created by pyminifier (https://github.com/liftoff/pyminifier)
