import multiprocessing
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞹶=NotImplementedError
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ٹ=sum
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﵧ=list
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓禰=filter
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺠ=isinstance
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ=len
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ẩ=open
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠊=UnicodeDecodeError
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐦇=Exception
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐡓=range
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐨗=False
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭝ=multiprocessing.Manager
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𣗳=multiprocessing.cpu_count
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓䨞=multiprocessing.Process
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ꉗ=multiprocessing.Queue
import queue
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓醳=queue.Empty
from coalib.collecting.Collectors import collect_files
from coalib.collecting import Dependencies
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺟ=Dependencies.resolve
from coalib.output.printers import LOG_LEVEL
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺀ=LOG_LEVEL.WARNING
from coalib.processes.BearRunning import run
from coalib.processes.CONTROL_ELEMENT import CONTROL_ELEMENT
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𨿄=CONTROL_ELEMENT.LOCAL
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𣼺=CONTROL_ELEMENT.GLOBAL_FINISHED
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧪏=CONTROL_ELEMENT.LOCAL_FINISHED
𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠰=CONTROL_ELEMENT.GLOBAL
from coalib.results.HiddenResult import HiddenResult
from coalib.settings.Setting import path_list
from coalib.misc.i18n import _
from coalib.processes.LogPrinterThread import LogPrinterThread
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥍑():
 try:
  return 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𣗳()
 except 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞹶: 
  return 2
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢽀(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﴚ,any_list):
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𫜰 in any_list:
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﴚ.put(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𫜰)
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ):
 return 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ٹ((1 if process.is_alive()else 0)for process in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳉ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬣,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰,print_results):
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬣=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﵧ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓禰(lambda result:not 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺠ(result,HiddenResult),𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬣))
 print_results(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬣,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积)
 return 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰 or 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬣)>0
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳰ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞺸,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗):
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积={}
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻩ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞺸:
  try:
   with 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ẩ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻩ,"r",encoding="utf-8")as f:
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻩ]=f.readlines()
  except 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠊:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗.warn(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𤊈("Failed to read file '{}'. It seems to contain " "non-unicode characters. Leaving it " "out.".format(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻩ)))
  except 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐦇 as 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭣ: 
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗.log_exception(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𤊈("Failed to read file '{}' because of " "an unknown error. Leaving it " "out.").format(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻩ),𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭣ,log_level=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺀ)
 return 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓聈(section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣):
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐡓(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅)):
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ]=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ](section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣,TIMEOUT=0.1)
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐡓(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ)):
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ]=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ](𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣,TIMEOUT=0.1)
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬞(section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,job_count,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗):
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞺸=collect_files(path_list(section.get('files',"")))
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳰ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞺸,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞹹=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭝ()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𓂒=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ꉗ()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢳔=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ꉗ()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧼏=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞹹.dict()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓庤=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞹹.dict()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ꉗ()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃓=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ꉗ()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﮭ={"file_name_queue":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢳔,"local_bear_list":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,"global_bear_list":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,"global_bear_queue":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𓂒,"file_dict":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,"local_result_dict":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧼏,"global_result_dict":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓庤,"message_queue":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣,"control_queue":𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃓,"timeout":0.1}
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓聈(section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐤣)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢽀(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢳔,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积.keys())
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𢽀(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𓂒,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐡓(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ)))
 return([𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓䨞(target=run,kwargs=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﮭ)for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ڋ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐡓(job_count)],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﮭ)
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃐(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃓,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧼏,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓庤,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,print_results):
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐨗
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥟦=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ۯ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠒=[]
 while 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥟦>1 and 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ>1:
  try:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭢ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃓.get(timeout=0.1)
   if 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏==𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧪏:
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥟦-=1
   elif 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏==𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𨿄:
    assert 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥟦!=0
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳉ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𧼏[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭢ],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰,print_results)
   elif 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏==𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠰:
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠒.append(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭢ)
  except 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓醳:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𫜰 in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠒:
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳉ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓庤[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𫜰],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰,print_results)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
 while 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ>1:
  try:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭢ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃓.get(timeout=0.1)
   if 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏==𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐠰:
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﳉ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓庤[𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﭢ],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓积,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰,print_results)
   else:
    assert 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬏==𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𣼺
    𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
  except 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓醳:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𪾜(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ)
 return 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓땰
def 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𞺁(section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,print_results,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗):
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺟ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﺟ(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𥍑()
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐬞(section,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃅,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻤ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶋ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓煣=LogPrinterThread(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["message_queue"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓汗)
 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ.append(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓煣)
 for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻞ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ:
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻞ.start()
 try:
  return(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐃐(𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ,𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["control_queue"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["local_result_dict"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["global_result_dict"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["file_dict"],print_results),𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["local_result_dict"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["global_result_dict"],𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓㤆["file_dict"])
 finally:
  𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓煣.running=𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓𐨗
  for 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻞ in 𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﶞ:
   𫔧ࡀߋﲰ𐰛וּ𝜈燈ڊޱ𢫪ﰼ𐩯ﱥݷ𩑈瘽ﮤ𫄭𐰴𪡻𞺥䃒ﰚ𥋷𐨦ﲏﶺ𐡓ﻞ.join()
# Created by pyminifier (https://github.com/liftoff/pyminifier)
