import os
import unittest
from os.path import abspath

from coalib.nestedlib.NlFileHandler import (get_nl_file_dict,
                                            get_nl_sections,
                                            get_line_list,
                                            beautify_line_list,
                                            get_nl_file_dict,
                                            get_preprocessed_nl_sections)
from coalib.nestedlib.parsers.PyJinjaParser import PyJinjaParser
from coalib.nestedlib.parsers.Parser import (Parser,
                                             create_nl_section,
                                             get_file)


TEST_FILE_DIR = os.path.join(os.path.split(__file__)[0],
                             'parsers/file_test_files')


class DummyParser(Parser):
    """
    Dummy Parser
    """

    def parse(self, filename):
        return None


class NlFileHandler(unittest.TestCase):

    def setUp(self):
        self.file_test_dir = TEST_FILE_DIR
        self.test_filename1 = 'test-jinja-py.py.jj2.txt'
        self.test_file1_path = os.path.join(self.file_test_dir,
                                            self.test_filename1)
        self.abs_test_file1_path = abspath(self.test_file1_path)

        self.parser = PyJinjaParser()
        self.all_nl_sections = self.parser.parse(self.abs_test_file1_path)

    def test_get_nl_sections(self):
        uut_lang = 'jinja2'
        uut_all_nl_sections = self.all_nl_sections
        uut_nl_sections = get_nl_sections(uut_all_nl_sections, uut_lang)
        uut_section_list = []

        expected_nl_sections = [
            self.abs_test_file1_path + ': 2: jinja2: L2 C1: L5 C10:' +
            ' L2 C1: L5 C10',
            self.abs_test_file1_path + ': 3: jinja2: L6 C1: L6 C13:' +
            ' L6 C1: L6 C13'
        ]

        for nl_section in uut_nl_sections:
            uut_section_list.append(str(nl_section))

        self.assertEqual(uut_section_list, expected_nl_sections)

    def test_get_line_list(self):
        uut_lang = 'jinja2'
        uut_all_nl_sections = self.all_nl_sections
        uut_nl_sections = get_nl_sections(uut_all_nl_sections, uut_lang)
        uut_line_list = get_line_list(
            uut_nl_sections, self.abs_test_file1_path)

        expected_line_list = [' ',
                              '{% if x is True %}\n',
                              '    {% set var3 = value3 %}\n',
                              '    \n',
                              '{% elif %}\n',
                              '    {{ var }}                   '
                              ]
        self.assertEqual(uut_line_list, expected_line_list)

        test_filename2 = 'test-jinja2-py.jj2.txt'

        test_file2_path = os.path.join(self.file_test_dir,
                                       test_filename2)
        abs_test_file2_path = abspath(test_file2_path)
        uut_lang = 'jinja2'
        uut_all_nl_sections = self.parser.parse(abs_test_file2_path)
        uut_nl_sections = get_nl_sections(uut_all_nl_sections, uut_lang)
        uut_line_list = get_line_list(
            uut_nl_sections, abs_test_file2_path)
        expected_line_list = [
                        ' ',
                        '{% if x is True %}\n',
                        '    {% set var3 = value3 %}\n',
                        '    \n',
                        '{% elif %}\n',
                        '    {{ var }}                    {{ y }}    {{ x }}'
                        ]
        self.assertEqual(uut_line_list, expected_line_list)

    def test_beautify_line_list(self):

        uut_line_list = ['',
                         ' ',
                         '\n',
                         '  \n',
                         '\n  ',
                         '    {% set var3 = value3 %}\n',
                         '{% elif %}',
                         '    {{ var }}                   '
                         ]

        expected_line_tuple = ('\n',
                               '\n',
                               '\n',
                               '\n',
                               '\n',
                               '    {% set var3 = value3 %}\n',
                               '{% elif %}\n',
                               '    {{ var }}                   \n'
                               )

        beautified_line_tuple = beautify_line_list(uut_line_list)

        self.assertEqual(beautified_line_tuple, expected_line_tuple)

    def test_get_nl_file_dict(self):
        uut_temp_file_name = self.test_filename1 + '_nl_jinja2'
        uut_lang = 'jinja2'
        uut_file_dict = get_nl_file_dict(self.abs_test_file1_path,
                                         uut_temp_file_name, uut_lang,
                                         self.parser)

        expected_file_dict = {
            'test-jinja-py.py.jj2.txt_nl_jinja2': (
                '\n',
                '# Start Nl Section: 2\n',
                '{% if x is True %}\n',
                '    {% set var3 = value3 %}\n',
                '\n',
                '{% elif %}\n',
                '# End Nl Section: 2\n',
                '# Start Nl Section: 3\n',
                '    {{ var }} = sum_square(x1*2)\n',
                '# End Nl Section: 3\n'
            )
        }
        self.maxDiff = None
        self.assertEqual(uut_file_dict, expected_file_dict)

    def test_get_preprocessed_nl_sections(self):
        uut_all_nl_sections = self.all_nl_sections
        uut_parser = DummyParser()
        with self.assertRaises(SystemExit) as cm:
            preprocessed_nl_sections = get_preprocessed_nl_sections(
                uut_all_nl_sections, uut_parser)

    def test_coala_setup_template(self):
        """
        Test the jinja temporary file generated for coala setup template file.
        """
        uut_test_filename = 'test-setup-py.py.jj2.txt'
        uut_test_file_path = os.path.join(
            self.file_test_dir, uut_test_filename)
        uut_abs_test_file_path = abspath(uut_test_file_path)
        uut_temp_file_name = 'test-setup-py.py.jj2.txt_nl_jinja2'

        temp_file_dict = get_nl_file_dict(uut_abs_test_file_path,
                                          uut_temp_file_name,
                                          'jinja2',
                                          self.parser)

        """
        # Get the file_dict as a string.
        # It's easier for comparision
        temp_file_output_name = 'coala_setup_jinja2_temp_file.py.jj2.txt'
        temp_file_output_dir = os.path.join(os.path.split(__file__)[0],
                            'test_files_output')
        temp_file_output_path = os.path.join(self.temp_file_output_dir,
                                                temp_file_output_name)
        abs_temp_file_output_path = abspath(temp_file_output_path)
        temp_file_dict_output_file = File(abs_temp_file_output_path)

        expected_output_string =  temp_file_dict_output_file.string
        """

        expected_tuple = (
            '# Start Nl Section: 1\n',
            '{% if not scm_host %}\n',
            "{% set scm_host = 'github.com' %}\n",
            '{% endif %}\n',
            '{% block shebang %}\n',
            '# End Nl Section: 1\n',
            '\n',
            '# Start Nl Section: 3\n',
            '{% endblock %}\n',
            '{% set min_python_version = ' +
            "min_python_version|default('2.6') %}\n",
            '{% set min_python_version = ' +
            "min_python_version.split('.', 2) %}\n",
            '\n',
            '{% block header %}\n',
            '# End Nl Section: 3\n',
            '\n',
            '# Start Nl Section: 5\n',
            '{% endblock %}\n',
            '# End Nl Section: 5\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 7\n',
            '{% if external_module_library %}\n',
            '# End Nl Section: 7\n',
            '\n',
            '# Start Nl Section: 9\n',
            '{% else %}\n',
            '\n',
            '# End Nl Section: 9\n',
            '\n',
            '\n',
            '# Start Nl Section: 11\n',
            '{%endif%}\n',
            '{%block compat_block%}\n',
            '# End Nl Section: 11\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 13\n',
            '{%endblock%}\n',
            '\n',
            '# End Nl Section: 13\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 15\n',
            '{% if PY33 %}\n',
            '# End Nl Section: 15\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 17\n',
            '{% endif %}\n',
            '\n',
            '# End Nl Section: 17\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 19\n',
            'NAME = "{{name}}"\n',
            '# End Nl Section: 19\n',
            '# Start Nl Section: 20\n',
            'AUTHOR = "{{author}}"\n',
            '# End Nl Section: 20\n',
            '# Start Nl Section: 21\n',
            'VERSION = "{{current_version}}"\n',
            '# End Nl Section: 21\n',
            '# Start Nl Section: 22\n',
            'EMAIL = "{{contact}}"\n',
            '# End Nl Section: 22\n',
            '# Start Nl Section: 23\n',
            'LICENSE = "{{license}}"\n',
            '# End Nl Section: 23\n',
            '# Start Nl Section: 24\n',
            '{% if MAINTAINER %}\n',
            '# End Nl Section: 24\n',
            '# Start Nl Section: 25\n',
            'MAINTAINER = "{{maintainer}}"\n',
            '# End Nl Section: 25\n',
            '# Start Nl Section: 26\n',
            'MAINTAINER_CONTACT = "{{maintainer_contact}}"\n',
            '# End Nl Section: 26\n',
            '# Start Nl Section: 27\n',
            '{% endif %}\n',
            '{% if command_line_interface or entry_points %}\n',
            '# End Nl Section: 27\n',
            '\n',
            '# Start Nl Section: 29\n',
            "{% if not entry_points or 'console_scripts' " +
            'not in entry_points %}\n',
            '# End Nl Section: 29\n',
            '\n',
            '# Start Nl Section: 31\n',
            '        "{{command_line_interface}} = {{ entry_point }}"\n',
            '# End Nl Section: 31\n',
            '\n',
            '# Start Nl Section: 33\n',
            '{% endif %}\n',
            '{% if entry_points %}\n',
            '  {% for group_name, items in entry_points.items() %}\n',
            '# End Nl Section: 33\n',
            '# Start Nl Section: 34\n',
            '    "{{group_name}}": [\n',
            '# End Nl Section: 34\n',
            '# Start Nl Section: 35\n',
            '      {% if group_name == "console_scripts" ' +
            'and command_line_interface %}\n',
            '# End Nl Section: 35\n',
            '# Start Nl Section: 36\n',
            '        "{{command_line_interface}} = {{ entry_point }}",\n',
            '# End Nl Section: 36\n',
            '# Start Nl Section: 37\n',
            '      {% endif %}\n',
            '      {% for item in items %}\n',
            '# End Nl Section: 37\n',
            '# Start Nl Section: 38\n',
            '        "{{item}}",\n',
            '# End Nl Section: 38\n',
            '# Start Nl Section: 39\n',
            '      {% endfor %}\n',
            '# End Nl Section: 39\n',
            '\n',
            '# Start Nl Section: 41\n',
            '  {% endfor %}\n',
            '{% endif %}\n',
            '# End Nl Section: 41\n',
            '\n',
            '# Start Nl Section: 43\n',
            '{% endif %}\n',
            '# End Nl Section: 43\n',
            '\n',
            '# Start Nl Section: 45\n',
            '{% for line in description | split_length(70) %}\n',
            '# End Nl Section: 45\n',
            '# Start Nl Section: 46\n',
            '    "{{ line }}"{{ " +" if not loop.last}}\n',
            '# End Nl Section: 46\n',
            '# Start Nl Section: 47\n',
            '{% endfor %}\n',
            '# End Nl Section: 47\n',
            '\n',
            '# Start Nl Section: 49\n',
            'URL = "https://{{scm_host}}/{{organisation}}/{{name}}"\n',
            '# End Nl Section: 49\n',
            '# Start Nl Section: 50\n',
            'DOWNLOAD_URL = "%s/archive/{{release}}.tar.gz" % URL\n',
            '# End Nl Section: 50\n',
            '# Start Nl Section: 51\n',
            'FILES = ["README.rst",' +
            '{%block morefiles %}{%endblock%} "CHANGELOG.rst"]\n',
            '# End Nl Section: 51\n',
            '# Start Nl Section: 52\n',
            '{% if self.additional_keywords %}\n',
            '{% set additional_keywords = ' +
            'self.additional_keywords() %}\n',
            '{% if additional_keywords and not '
            'additional_keywords.rstrip().endswith(",") %}\n',
            '{% set additional_keywords = '
            'additional_keywords.rstrip() + ",\\n" %}\n',
            '{% endif %}\n',
            '{% endif %}\n',
            '# End Nl Section: 52\n',
            '\n',
            '\n',
            '# Start Nl Section: 54\n',
            '{% for keyword in keywords %}\n',
            '# End Nl Section: 54\n',
            '# Start Nl Section: 55\n',
            '    "{{keyword}}",\n',
            '# End Nl Section: 55\n',
            '# Start Nl Section: 56\n',
            '{% endfor %}\n',
            '    {%block additional_keywords -%}\n',
            '    {%endblock%}\n',
            '# End Nl Section: 56\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 58\n',
            '    {% if min_python_version <= ["2", "6"] %}\n',
            '# End Nl Section: 58\n',
            '\n',
            '# Start Nl Section: 60\n',
            '    {%- endif %}\n',
            '\n',
            '    {% if min_python_version <= ["2", "7"] %}\n',
            '# End Nl Section: 60\n',
            '\n',
            '# Start Nl Section: 62\n',
            '    {%- endif %}\n',
            '\n',
            '    {%- if min_python_version[0] == "3" %}\n',
            '# End Nl Section: 62\n',
            '\n',
            '# Start Nl Section: 64\n',
            '    {%- endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","3"] %}\n',
            '# End Nl Section: 64\n',
            '\n',
            '# Start Nl Section: 66\n',
            '    {%- endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","4"] %}\n',
            '# End Nl Section: 66\n',
            '\n',
            '# Start Nl Section: 68\n',
            '    {%- endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","5"] %}\n',
            '# End Nl Section: 68\n',
            '\n',
            '# Start Nl Section: 70\n',
            '    {%- endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","6"] %}\n',
            '# End Nl Section: 70\n',
            '\n',
            '# Start Nl Section: 72\n',
            '    {% endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","7"] %}\n',
            '# End Nl Section: 72\n',
            '\n',
            '# Start Nl Section: 74\n',
            '    {% endif %}\n',
            '\n',
            '    {% if min_python_version <= ["3","8"] %}\n',
            '# End Nl Section: 74\n',
            '\n',
            '# Start Nl Section: 76\n',
            '    {% endif %}\n',
            '\n',
            '    {%block additional_classifiers%}\n',
            '    {%endblock %}\n',
            '# End Nl Section: 76\n',
            '\n',
            '\n',
            '# Start Nl Section: 78\n',
            '{%macro handle_complex_dependency(complex_one) -%}\n',
            '{%set dependency, condition = complex_one.split(";")%}\n',
            '{% if condition == \'python_version<"3"\'%}\n',
            '# End Nl Section: 78\n',
            '\n',
            '# Start Nl Section: 80\n',
            '{% endif %}\n',
            '{% if condition == \'python_version>="3"\'%}\n',
            '# End Nl Section: 80\n',
            '\n',
            '# Start Nl Section: 82\n',
            '{% endif %}\n',
            '{% if condition == \'python_version<"2.7"\'%}\n',
            '# End Nl Section: 82\n',
            '\n',
            '# Start Nl Section: 84\n',
            '{% endif %}\n',
            '{% if condition == \'platform_python_implementation=="PyPy"\'%}\n',
            '# End Nl Section: 84\n',
            '\n',
            '# Start Nl Section: 86\n',
            '{%endif%}\n',
            '# End Nl Section: 86\n',
            '# Start Nl Section: 87\n',
            "    INSTALL_REQUIRES.append('{{dependency}}')\n",
            '# End Nl Section: 87\n',
            '# Start Nl Section: 88\n',
            '{%- endmacro %}\n',
            '# End Nl Section: 88\n',
            '\n',
            '# Start Nl Section: 90\n',
            '{% for dependency in dependencies: %}\n',
            "  {% if ';' not in dependency and not " +
            "dependency.startswith('#'): %}\n",
            "    {% if '#egg=' in dependency: %}\n",
            "      {% set dependency = dependency.split('#egg=') %}\n",
            '      {% set repo_link, egg_name = dependency[0],' +
            ' dependency[1] %}\n',
            '      {% set repo_link = repo_link.strip() %}\n',
            "      {% if '#' in egg_name: %}\n",
            "        {% set egg_name = egg_name.split('#')[0].strip() %}\n",
            '      {% endif %}\n',
            '# End Nl Section: 90\n',
            '# Start Nl Section: 91\n',
            '    "{{[repo_link, egg_name] | join(\'#egg=\')}}",\n',
            '# End Nl Section: 91\n',
            '# Start Nl Section: 92\n',
            "    {% elif '#' in dependency: %}\n",
            "      {% set dependency = dependency.split('#')[0].strip() %}\n",
            '# End Nl Section: 92\n',
            '# Start Nl Section: 93\n',
            '    "{{dependency}}",\n',
            '# End Nl Section: 93\n',
            '# Start Nl Section: 94\n',
            '    {% else %}\n',
            '# End Nl Section: 94\n',
            '# Start Nl Section: 95\n',
            '    "{{dependency}}",\n',
            '# End Nl Section: 95\n',
            '# Start Nl Section: 96\n',
            '    {% endif %}\n',
            '  {%   endif %}\n',
            '{% endfor %}\n',
            '# End Nl Section: 96\n',
            '\n',
            '# Start Nl Section: 98\n',
            '{% block additional_setup_commands %}\n',
            '# End Nl Section: 98\n',
            '\n',
            '# Start Nl Section: 100\n',
            '{% endblock %}\n',
            '\n',
            '{% for dependency in dependencies: %}\n',
            "  {%  if ';' in dependency: %}\n",
            '{{handle_complex_dependency(dependency)}}\n',
            '  {%   endif %}\n',
            '{% endfor %}\n',
            '\n',
            '{% if external_module_library %}\n',
            '# End Nl Section: 100\n',
            '\n',
            '# Start Nl Section: 102\n', "    '{{name}}',\n",
            '# End Nl Section: 102\n',
            '\n',
            '# Start Nl Section: 104\n',
            '{% for source in sources: %}\n',
            '# End Nl Section: 104\n',
            '# Start Nl Section: 105\n',
            '        "{{source}}",\n',
            '# End Nl Section: 105\n',
            '# Start Nl Section: 106\n',
            '{% endfor %}\n',
            '# End Nl Section: 106\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 108\n',
            '{% else %}\n',
            '# End Nl Section: 108\n',
            '\n',
            '# Start Nl Section: 110\n',
            '{% if extra_dependencies or dependencies: %}\n',
            '# End Nl Section: 110\n',
            '\n',
            '# Start Nl Section: 112\n',
            '  {% for dependency in extra_dependencies: %}\n',
            '     {% for key, value in dependency.items(): %}\n',
            '# End Nl Section: 112\n',
            '# Start Nl Section: 113\n',
            '    "{{key}}": {{value}},\n',
            '# End Nl Section: 113\n',
            '# Start Nl Section: 114\n',
            '     {% endfor %}\n',
            '  {% endfor %}\n',
            '# End Nl Section: 114\n',
            '\n',
            '# Start Nl Section: 116\n',
            '{% else: %}\n',
            '# End Nl Section: 116\n',
            '\n',
            '# Start Nl Section: 118\n',
            '{% endif %}\n',
            '{% endif %}\n',
            '# End Nl Section: 118\n',
            '\n',
            '# Start Nl Section: 120\n',
            '{% if nowheel %}\n',
            '# End Nl Section: 120\n',
            '\n',
            '# Start Nl Section: 122\n',
            '{% else %}\n',
            '# End Nl Section: 122\n',
            '\n',
            '# Start Nl Section: 124\n',
            '{% endif %}\n',
            '# End Nl Section: 124\n',
            '# Start Nl Section: 125\n',
            'GS_COMMAND = ("gs {{name}} v{{release}} " +\n',
            '# End Nl Section: 125\n',
            '# Start Nl Section: 126\n',
            '              "Find {{release}} in ' +
            'changelog for more details")\n',
            '# End Nl Section: 126\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 128\n',
            '            rmtree(os.path.join' +
            '(HERE, "{{name|replace(\'-\', \'_\')}}.egg-info"))\n',
            '# End Nl Section: 128\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 130\n',
            '{% if "tests" is exists %}\n',
            '# End Nl Section: 130\n',
            '\n',
            '# Start Nl Section: 132\n',
            '{% endif %}\n',
            '# End Nl Section: 132\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 134\n',
            '{% if MAINTAINER %}\n',
            '# End Nl Section: 134\n',
            '\n',
            '\n',
            '# Start Nl Section: 136\n',
            '{% endif %}\n',
            '# End Nl Section: 136\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 138\n',
            '{% if external_module_library %}\n',
            '# End Nl Section: 138\n',
            '\n',
            '# Start Nl Section: 140\n',
            '{% else %}\n',
            '# End Nl Section: 140\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '\n',
            '# Start Nl Section: 142\n',
            '{% if command_line_interface or entry_points %}\n',
            '# End Nl Section: 142\n',
            '\n',
            '# Start Nl Section: 144\n',
            '{% endif %}\n',
            '{% endif%}\n',
            '# End Nl Section: 144\n',
            '\n',
            '\n',
            '\n')

        self.assertEqual(temp_file_dict[uut_temp_file_name], expected_tuple)
