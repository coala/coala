#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
# for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import traceback

from coalib.misc.StringConstants import StringConstants
from coalib.processes.SectionExecutor import SectionExecutor
from coalib.settings.Section import Section
from coalib.settings.SectionManager import SectionManager


os.environ["LANG"] = "de_DE"
from coalib.misc.i18n import _


if __name__ == "__main__":
    # Set default section so we have a log printer if the SectionManager fails.
    sections = {"default": Section("default")}
    try:
        sections, local_bears, global_bears, targets = SectionManager().run()
        for section_name in sections:
            section = sections[section_name]
            if len(targets) == 0:
                if not bool(section.get("enabled", "true")):
                    continue
            elif section_name not in targets:
                continue

            sec_global_bears = global_bears[section_name]
            sec_local_bears = local_bears[section_name]

            SectionExecutor(section=section,
                            global_bear_list=sec_global_bears,
                            local_bear_list=sec_local_bears).run()
    except KeyboardInterrupt:
        print(_("Program terminated by user."))
    except SystemExit:
        pass
    except:
        exception = sys.exc_info()
        UNKNOWN_ERROR = _("An unknown error occurred.") + " " + \
                        StringConstants.THIS_IS_A_BUG
        exc_name = exception[0].__name__
        DESCRIPTION = _("During execution of coala an exception of type "
                        "{exception} was raised. This should never happen. "
                        "When asked for, the following information may help "
                        "investigating:").format(exception=str(exc_name)) + \
                      "\n\n" + str(traceback.extract_tb(exception[2]))
        sections["default"].log_printer.err(UNKNOWN_ERROR)
